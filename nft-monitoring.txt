/* Monitor each lazily minted NFT minted on Ethereum blockchain (first sale of a lazily minted NFT) */

stream _
from ETH_MintGate1155_CreateERC1155Rarible_Events
where @contract == ETH.address("0x2741532ae23ee3a3c0c272b17f9a2fb69bc24388")

process
  emit { @owner, @name, message: "NFT minted on Rarible (first sale)"  }
end

/*QuickMonitor to monitor ETH transfers to NFT wallet*/
stream QuickMonitor
from Transfers
where @to == ETH.address("0xc8b97ec6ff5e660358b6718847ab74d64f65469e") || @from == ETH.address("0xc8b97ec6ff5e660358b6718847ab74d64f65469e")
process
  let isCrystalProviderDataReady = false
  let crystalProviderData = {percentRiskScore: "0", decimalRiskScore: {value: 0, decimals: 0}, targetName: "", targetType: "", signals: {atm: "", darkMarket: "", darkService: "", exchange: "", gambling: "", illegalService: "", marketplace: "", miner: "", mixer: "", payment: "", ransom: "", riskyExchange: "", scam: "", stolenCoins: "", trustedExchange: "", wallet: ""}}
  let executionTarget = ETH.address("0xc8b97ec6ff5e660358b6718847ab74d64f65469e")
  let counterpartyAddress = 0x0
  if @to == executionTarget then counterpartyAddress = @from
  else counterpartyAddress = @to end
  let txInfo = { txHash: @tx_hash }
  emit { @from, @to, @value, txInfo }
end
